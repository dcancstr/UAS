// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UAS.Persistence.Contexts;

#nullable disable

namespace UAS.Persistence.Migrations
{
    [DbContext(typeof(UASDbContext))]
    [Migration("20230316155937_initialized")]
    partial class initialized
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("UAS.Domain.Entities.AppRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("UAS.Domain.Entities.AppRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("UAS.Domain.Entities.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonelDogumYili")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonelImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonelKad")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonelPw")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PersonelSMI")
                        .HasColumnType("bit");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenEndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TcKimlikNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("UAS.Domain.Entities.AppUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("UAS.Domain.Entities.AppUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("UAS.Domain.Entities.AppUserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("UAS.Domain.Entities.AppUserToken", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("UAS.Domain.Entities.GrupMenuPanel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("EDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("grupMenuSMI")
                        .HasColumnType("bit");

                    b.Property<int>("menuID")
                        .HasColumnType("int");

                    b.Property<int>("personelRolTipID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("GrupMenuPanels");
                });

            modelBuilder.Entity("UAS.Domain.Entities.MenuKategori", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("EDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("menuKategoriAd")
                        .HasColumnType("varchar(100)");

                    b.Property<int>("menuKategoriSira")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("MenuKategories");
                });

            modelBuilder.Entity("UAS.Domain.Entities.MenuPanel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Controller")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("EDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("menuAd")
                        .HasColumnType("varchar(200)");

                    b.Property<string>("menuIcon")
                        .HasColumnType("varchar(100)");

                    b.Property<int>("menuKategoriID")
                        .HasColumnType("int");

                    b.Property<string>("menuLink")
                        .HasColumnType("varchar(MAX)");

                    b.Property<bool>("menuSMI")
                        .HasColumnType("bit");

                    b.Property<int>("menuSira")
                        .HasColumnType("int");

                    b.Property<int>("menuUstID")
                        .HasColumnType("int");

                    b.Property<bool>("menuVisible")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("menuKategoriID");

                    b.ToTable("MenuPanels");
                });

            modelBuilder.Entity("UAS.Domain.Entities.PersonelRol", b =>
                {
                    b.Property<int>("AppUserId")
                        .HasColumnType("int");

                    b.Property<int>("personelRolTipID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("EDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("personelRolSMI")
                        .HasColumnType("bit");

                    b.Property<int>("personelRolSira")
                        .HasColumnType("int");

                    b.HasKey("AppUserId", "personelRolTipID");

                    b.HasIndex("personelRolTipID");

                    b.ToTable("PersonelRols");
                });

            modelBuilder.Entity("UAS.Domain.Entities.PersonelRolTip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("EDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("personelRolTipAd")
                        .HasColumnType("varchar(300)");

                    b.Property<string>("personelRolTipColor")
                        .HasColumnType("varchar(50)");

                    b.Property<int>("personelRolTipIndexUrl")
                        .HasColumnType("int");

                    b.Property<bool>("personelRolTipSMI")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("PersonelRolTips");
                });

            modelBuilder.Entity("UAS.Domain.Entities.SiteSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("EDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LayoutImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<string>("LogoUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<string>("MailAdresi")
                        .IsRequired()
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<string>("MailSifresi")
                        .IsRequired()
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<string>("MailSunucuAdresi")
                        .IsRequired()
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<string>("MailSunucuPortu")
                        .IsRequired()
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<string>("SiteName")
                        .IsRequired()
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<string>("SmsApiId")
                        .IsRequired()
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<string>("SmsApiKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<string>("SmsApiUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<string>("SmsGonderici")
                        .IsRequired()
                        .HasColumnType("nvarchar(MAX)");

                    b.HasKey("Id");

                    b.ToTable("SiteSettings");
                });

            modelBuilder.Entity("UAS.Domain.Entities.AppRoleClaim", b =>
                {
                    b.HasOne("UAS.Domain.Entities.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UAS.Domain.Entities.AppUserClaim", b =>
                {
                    b.HasOne("UAS.Domain.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UAS.Domain.Entities.AppUserLogin", b =>
                {
                    b.HasOne("UAS.Domain.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UAS.Domain.Entities.AppUserRole", b =>
                {
                    b.HasOne("UAS.Domain.Entities.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UAS.Domain.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UAS.Domain.Entities.AppUserToken", b =>
                {
                    b.HasOne("UAS.Domain.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UAS.Domain.Entities.MenuPanel", b =>
                {
                    b.HasOne("UAS.Domain.Entities.MenuKategori", "MenuKategori")
                        .WithMany("MenuPanels")
                        .HasForeignKey("menuKategoriID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MenuKategori");
                });

            modelBuilder.Entity("UAS.Domain.Entities.PersonelRol", b =>
                {
                    b.HasOne("UAS.Domain.Entities.AppUser", "AppUser")
                        .WithMany("PersonelRols")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UAS.Domain.Entities.PersonelRolTip", "PersonelRolTip")
                        .WithMany("PersonelRols")
                        .HasForeignKey("personelRolTipID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("PersonelRolTip");
                });

            modelBuilder.Entity("UAS.Domain.Entities.AppUser", b =>
                {
                    b.Navigation("PersonelRols");
                });

            modelBuilder.Entity("UAS.Domain.Entities.MenuKategori", b =>
                {
                    b.Navigation("MenuPanels");
                });

            modelBuilder.Entity("UAS.Domain.Entities.PersonelRolTip", b =>
                {
                    b.Navigation("PersonelRols");
                });
#pragma warning restore 612, 618
        }
    }
}
